package jzcore

import chisel3._
import chisel3.util._

object RV64IM extends HasInstrType {
  def ADD     = BitPat("b0000000_?????_?????_000_?????_0110011")
  def SUB     = BitPat("b0100000_?????_?????_000_?????_0110011")
  def SLL     = BitPat("b0000000_?????_?????_001_?????_0110011")
  def SLT     = BitPat("b0000000_?????_?????_010_?????_0110011")
  def SLTU    = BitPat("b0000000_?????_?????_011_?????_0110011")
  def XOR     = BitPat("b0000000_?????_?????_100_?????_0110011")
  def SRL     = BitPat("b0000000_?????_?????_101_?????_0110011")
  def SRA     = BitPat("b0100000_?????_?????_101_?????_0110011")
  def OR      = BitPat("b0000000_?????_?????_110_?????_0110011")
  def AND     = BitPat("b0000000_?????_?????_111_?????_0110011")
  def MUL     = BitPat("b0000001_?????_?????_000_?????_0110011")
  def DIV     = BitPat("b0000001_?????_?????_100_?????_0110011")

  def ADDI    = BitPat("b???????_?????_?????_000_?????_0010011")

  def EBREAK  = BitPat("b0000000_00001_00000_000_00000_1110011")

  def AUIPC   = BitPat("b???????_?????_?????_???_?????_0010111")
  def LUI     = BitPat("b???????_?????_?????_???_?????_0110111")

  def JAL     = BitPat("b???????_?????_?????_???_?????_1101111")
  def JALR    = BitPat("b???????_?????_?????_???_?????_1100111")

  def BEQ     = BitPat("b???????_?????_?????_000_?????_1100011")
  def BNE     = BitPat("b???????_?????_?????_001_?????_1100011")
  def BLT     = BitPat("b???????_?????_?????_100_?????_1100011")
  def BGE     = BitPat("b???????_?????_?????_101_?????_1100011")
  def BLTU    = BitPat("b???????_?????_?????_110_?????_1100011")
  def BGEU    = BitPat("b???????_?????_?????_111_?????_1100011")

  def SD      = BitPat("b???????_?????_?????_011_?????_0100011")

  val table = Array (
    ADD     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.add),
    SUB     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.sub),
    SLL     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.sll),
    SLT     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.slt),
    SLTU    -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.sltu),
    XOR     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.xor),
    SRL     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.srl),
    SRA     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.sra),
    OR      -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.or),
    AND     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.and),
    MUL     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.mul),
    DIV     -> List(InstrR, SrcType.reg, SrcType.reg, AluOp.div),

    ADDI    -> List(InstrI, SrcType.reg, SrcType.imm, AluOp.add),

    EBREAK  -> List(InstrD, SrcType.nul, SrcType.nul, AluOp.nop),

    AUIPC   -> List(InstrU, SrcType.pc, SrcType.imm, AluOp.add),
    LUI     -> List(InstrU, SrcType.nul, SrcType.imm, AluOp.add),

    JAL     -> List(InstrJ, SrcType.pc, SrcType.plus4, AluOp.jump),
    JALR    -> List(InstrIJ, SrcType.pc, SrcType.plus4, AluOp.jump),

    BEQ     -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.beq),
    BNE     -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.bne),
    BLT     -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.blt),
    BGE     -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.bge),
    BLTU    -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.bltu),
    BGEU    -> List(InstrB, SrcType.pc, SrcType.imm, AluOp.bgeu),

    SD      -> List(InstrS, SrcType.nul, SrcType.nul, AluOp.nop), //todo
  )
}

object Instruction extends HasInstrType {
  def NOP = 0x00000013.U
  val DecodeDefault = List(InstrN, AluOp.nop, SrcType.nul, SrcType.nul)
}